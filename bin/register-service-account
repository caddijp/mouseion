#!/bin/bash
#
# Create and configure a service account key then download secret key as JSON.
#
# This script expects gcloud SDK is installed and authenticated as an account
# having the roles/admin on the target GCP project.

set -eo pipefail -o posix

PROGNAME=$(basename $0)

usage() {
  echo "Usage: $PROGNAME [OPTIONS] REPONAME"
  echo
  echo "Arguments:"
  echo " REPONAME                      Target GitHub repository name."
  echo
  echo "Options:"
  echo " -h, --help                    Show this help."
  echo " -o, --orgname        ORGNAME  GitHub organization name. (Default: flywheel-jp)"
  echo " -p, --project        PROJECT  GCP project name. (Default: flywheel-mouseion)"
  echo " -s, --serviceAccount NAME     Service account name. Use this if REPONAME is shorter than 6 chars."
  echo
  exit 1
}

for OPT in "$@"
do
  case $OPT in
    -h | --help)
      usage
      ;;
    -o | --orgname)
      if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        usage
      fi
      orgname=$2
      shift 2
      ;;
    -p | --project)
      if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        usage
      fi
      project=$2
      shift 2
      ;;
    -s | --serviceAccount)
      if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        usage
      fi
      serviceAccount=$2
      shift 2
      ;;
    *)
      if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
        param+=( "$1" )
        shift 1
      fi
      ;;
  esac
done

if [ -z "${param+z}" ]; then
  echo "$PROGNAME: too few arguments" 1>&2
  exit 1
fi

REPONAME="$param"
PROJECT="${project:-flywheel-mouseion}"
ORGNAME="${orgname:-flywheel-jp}"
SERVICE_ACCOUNT="${serviceAccount:-$REPONAME}"
EMAIL="${SERVICE_ACCOUNT}@${PROJECT}.iam.gserviceaccount.com"
KEY="tmp/${REPONAME}.json"

if [ -z "$REPONAME" ] ; then
  usage
  exit 1
fi

echo "Create a service account"
gcloud iam service-accounts create "${SERVICE_ACCOUNT}" \
  --display-name="${REPONAME}-deploy-agent" \
  --description="Service account for ${ORGNAME}/${REPONAME}" \
  --project="$PROJECT"

echo "Attach roles/storage.objectAdmin to ${EMAIL}"
gcloud projects add-iam-policy-binding "$PROJECT" \
  --member="serviceAccount:${EMAIL}" \
  --role='roles/storage.objectAdmin'

echo "Create a secret KEY for the service account"
gcloud iam service-accounts keys create "$KEY" \
  --iam-account="${EMAIL}" \
  --project="$PROJECT"

if [ `uname` = "Darwin" ] ; then
  echo "Copy Base64 encoded ${KEY} to clipboard"
  cat $KEY | base64 | pbcopy

  open "https://github.com/${ORGNAME}/${REPONAME}/settings/secrets"
fi
